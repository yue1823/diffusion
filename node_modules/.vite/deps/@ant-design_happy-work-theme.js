import {
  render,
  unmount
} from "./chunk-S2DODBWP.js";
import {
  config_provider_default
} from "./chunk-2ANLEWEF.js";
import {
  CSSMotionList_default,
  Keyframes_default,
  createTheme,
  init_es,
  init_es4 as init_es2,
  init_raf,
  init_useEvent,
  raf_default,
  useEvent,
  useStyleRegister
} from "./chunk-CSZKGKHJ.js";
import "./chunk-RL5FWZGL.js";
import "./chunk-VKUSS7EZ.js";
import "./chunk-I3COAS7K.js";
import "./chunk-V2KP3M5O.js";
import "./chunk-CGUALBWG.js";
import {
  TinyColor,
  _defineProperty,
  _objectSpread2,
  _slicedToArray,
  init_defineProperty,
  init_objectSpread2,
  init_public_api,
  init_slicedToArray,
  require_classnames
} from "./chunk-OSSIAG6A.js";
import "./chunk-IBWPQ3F6.js";
import {
  require_react
} from "./chunk-CMM6OKGN.js";
import {
  __toESM
} from "./chunk-OL46QLBJ.js";

// node_modules/@ant-design/happy-work-theme/es/HappyProvider.js
init_useEvent();
var React2 = __toESM(require_react());

// node_modules/@ant-design/happy-work-theme/es/DotEffect/index.js
init_objectSpread2();
init_defineProperty();
init_slicedToArray();
init_public_api();
var import_classnames = __toESM(require_classnames());
init_es2();
init_raf();
var React = __toESM(require_react());

// node_modules/@ant-design/happy-work-theme/es/DotEffect/style.js
init_defineProperty();
init_objectSpread2();
init_es();
var DEFAULT_THEME = createTheme(function(token) {
  return token;
});
var TARGET_ATTR = "data-happy-wave-target";
var antWaveTargetEffect = new Keyframes_default("antWaveTargetEffect", {
  "0%": {
    transform: "scale(1)"
  },
  "10%": {
    transform: "scale(1.1)"
  },
  "35%": {
    transform: "scale(0.94)"
  },
  "60%": {
    transform: "scale(1.05)"
  },
  "85%": {
    transform: "scale(0.97)"
  },
  "100%": {
    transform: "scale(1)"
  }
});
var antWaveDotEffect = new Keyframes_default("antWaveDotEffect", {
  "0%": {
    opacity: 0,
    left: "var(--start-x)",
    top: "var(--start-y)",
    width: "var(--start-size)",
    height: "var(--start-size)",
    background: "var(--background)",
    border: "var(--border)"
  },
  "25%": {
    opacity: 1
  },
  "50%": {
    opacity: 0.8
  },
  "100%": {
    opacity: 0,
    left: "var(--end-x)",
    top: "var(--end-y)",
    width: "var(--end-size)",
    height: "var(--end-size)",
    background: "var(--background)",
    border: "var(--border)"
  }
});
function useStyle(prefixCls, hashId, token) {
  var sharedConfig = {
    theme: DEFAULT_THEME,
    token
    // nonce: () => csp?.nonce!,
  };
  useStyleRegister(_objectSpread2(_objectSpread2({}, sharedConfig), {}, {
    path: ["HappyWorkTheme", "target"]
  }), function() {
    return _defineProperty({}, "[".concat(TARGET_ATTR, "-").concat(hashId, "], & [").concat(TARGET_ATTR, "-").concat(hashId, "]"), {
      animationName: antWaveTargetEffect,
      animationDuration: "0.45s",
      animationTimingFunction: "ease-in-out",
      animationFillMode: "backwards"
    });
  });
  useStyleRegister(_objectSpread2(_objectSpread2({}, sharedConfig), {}, {
    hashId,
    path: ["HappyWorkTheme", "effect"]
  }), function() {
    var dotPrefixCls = ".".concat(prefixCls);
    return [_defineProperty({}, dotPrefixCls, _defineProperty({
      position: "fixed",
      pointerEvents: "none",
      zIndex: 999
    }, "".concat(dotPrefixCls, "-dot"), {
      boxSizing: "border-box",
      position: "absolute",
      borderRadius: "100%",
      opacity: 0,
      transform: "translate(-50%, -50%)",
      // Start Position
      zIndex: 999,
      // =================== Basic Motion ===================
      "&.happy-in-out": {
        animationName: antWaveDotEffect,
        animationDuration: token.motionDurationSlow,
        // animationDuration: '10s',
        animationTimingFunction: "linear",
        animationFillMode: "backwards"
      }
    }))];
  });
}

// node_modules/@ant-design/happy-work-theme/es/DotEffect/index.js
var DOT_COUNT = 7;
var DOT_COUNT_LG = 10;
function inRange(x, y, left, top, right, bottom) {
  return x >= left && x <= right && y >= top && y <= bottom;
}
function DotEffect(_ref) {
  var hashId = _ref.hashId, target = _ref.target, token = _ref.token, onFinish = _ref.onFinish;
  var prefixCls = "happy-wave";
  var dotPrefixCls = "".concat(prefixCls, "-dot");
  var _React$useState = React.useState(null), _React$useState2 = _slicedToArray(_React$useState, 2), dots = _React$useState2[0], setDots = _React$useState2[1];
  var _React$useState3 = React.useState(0), _React$useState4 = _slicedToArray(_React$useState3, 2), left = _React$useState4[0], setLeft = _React$useState4[1];
  var _React$useState5 = React.useState(0), _React$useState6 = _slicedToArray(_React$useState5, 2), top = _React$useState6[0], setTop = _React$useState6[1];
  useStyle(prefixCls, hashId, token);
  var targetAttrName = "".concat(TARGET_ATTR, "-").concat(hashId);
  React.useEffect(function() {
    var id = raf_default(function() {
      if (["-dangerous", "-error"].some(function(skipCls) {
        return target.className.includes(skipCls);
      })) {
        return;
      }
      var rect = target.getBoundingClientRect();
      var width = rect.width, height = rect.height;
      setLeft(rect.left + width / 2);
      setTop(rect.top + height / 2);
      setDots([]);
      var minSize = Math.min(width, height);
      var maxSize = Math.max(width, height);
      var halfMinSize = minSize / 2;
      var halfMaxSize = maxSize / 2;
      var halfWidth = width / 2;
      var halfHeight = height / 2;
      var OFFSET_MIN = 15;
      var OFFSET_MAX = 30;
      var halfOffsetMinWidth = halfWidth + OFFSET_MIN;
      var halfOffsetMinHeight = halfHeight + OFFSET_MIN;
      var halfOffsetMaxWidth = halfWidth + OFFSET_MAX;
      var halfOffsetMaxHeight = halfHeight + OFFSET_MAX;
      var dotCount = minSize >= 20 ? DOT_COUNT_LG : DOT_COUNT;
      setTimeout(function() {
        var offsetAngle = Math.random() * 360;
        var colorPrimary = token.colorPrimary;
        var colorHsv = new TinyColor(colorPrimary).toHsv();
        colorHsv.h -= 30;
        var colorPrimaryWeak = new TinyColor(colorHsv).toHexString();
        setDots(new Array(dotCount).fill(null).map(function(_, index) {
          var rotate = 360 / dotCount;
          var randomAngle = offsetAngle + rotate * index;
          var startX = 0;
          var startY = 0;
          for (var startDist = halfMinSize - 1; startDist <= halfMaxSize; startDist += 1) {
            var x = Math.cos(randomAngle * Math.PI / 180) * startDist;
            var y = Math.sin(randomAngle * Math.PI / 180) * startDist;
            if (!inRange(x, y, -halfWidth, -halfHeight, halfWidth, halfHeight)) {
              break;
            }
            startX = x;
            startY = y;
          }
          var endX = startX;
          var endY = startY;
          var endDist = halfMinSize;
          var endHalfWidth = Math.random() * (halfOffsetMaxWidth - halfOffsetMinWidth) + halfOffsetMinWidth;
          var endHalfHeight = Math.random() * (halfOffsetMaxHeight - halfOffsetMinHeight) + halfOffsetMinHeight;
          do {
            endX = Math.cos(randomAngle * Math.PI / 180) * endDist;
            endY = Math.sin(randomAngle * Math.PI / 180) * endDist;
            endDist += 1;
          } while (inRange(endX, endY, -endHalfWidth, -endHalfHeight, endHalfWidth, endHalfHeight));
          var size = Math.random() * 3 + 3;
          if (height >= 20) {
            size = Math.random() * 4 + 6;
          }
          return {
            key: index + 1,
            startX: "".concat(startX, "px"),
            startY: "".concat(startY, "px"),
            endX: "".concat(endX, "px"),
            endY: "".concat(endY, "px"),
            startSize: "".concat(size, "px"),
            endSize: "".concat(Math.random() > 0.75 ? size : 0, "px"),
            type: Math.random() > 0.6 ? "outlined" : "fill",
            color: Math.random() > 0.5 ? colorPrimary : colorPrimaryWeak
          };
        }));
      }, 50);
      target.setAttribute(targetAttrName, "true");
    });
    return function() {
      raf_default.cancel(id);
    };
  }, []);
  React.useEffect(function() {
    var id = setTimeout(function() {
      target.removeAttribute(targetAttrName);
      onFinish();
    }, 600);
    return function() {
      clearTimeout(id);
    };
  }, []);
  if (!dots) {
    return null;
  }
  return React.createElement("div", {
    className: (0, import_classnames.default)(prefixCls, hashId),
    style: {
      left,
      top
    }
  }, React.createElement(CSSMotionList_default, {
    component: false,
    keys: dots,
    motionAppear: true,
    motionName: "happy-in-out"
  }, function(_ref2) {
    var _dotStyle;
    var motionCls = _ref2.className, motionStyle = _ref2.style, key = _ref2.key, startX = _ref2.startX, startY = _ref2.startY, endX = _ref2.endX, endY = _ref2.endY, startSize = _ref2.startSize, endSize = _ref2.endSize, type = _ref2.type, color = _ref2.color;
    var name = "".concat(dotPrefixCls, "-").concat(key);
    var dotCls = (0, import_classnames.default)(dotPrefixCls, motionCls, name);
    var dotStyle = (_dotStyle = {}, _defineProperty(_dotStyle, "--start-x", startX), _defineProperty(_dotStyle, "--start-y", startY), _defineProperty(_dotStyle, "--end-x", endX), _defineProperty(_dotStyle, "--end-y", endY), _defineProperty(_dotStyle, "--start-size", startSize), _defineProperty(_dotStyle, "--end-size", endSize), _dotStyle);
    if (type === "fill") {
      dotStyle["--background"] = color;
    } else {
      dotStyle["--border"] = "1px solid ".concat(color);
    }
    return React.createElement("div", {
      className: dotCls,
      style: _objectSpread2(_objectSpread2({}, motionStyle), dotStyle)
    });
  }));
}

// node_modules/@ant-design/happy-work-theme/es/HappyProvider.js
function HappyProvider(props) {
  var children = props.children, disabled = props.disabled;
  var showEffect = useEvent(function(target, info) {
    var token = info.token, hashId = info.hashId;
    var holder = document.createElement("div");
    holder.style.position = "absolute";
    holder.style.left = "0px";
    holder.style.top = "0px";
    document.body.appendChild(holder);
    render(React2.createElement(DotEffect, {
      target,
      token,
      hashId,
      onFinish: function onFinish() {
        unmount(holder).then(function() {
          var _holder$parentElement;
          (_holder$parentElement = holder.parentElement) === null || _holder$parentElement === void 0 ? void 0 : _holder$parentElement.removeChild(holder);
        });
      }
    }), holder);
  });
  var waveConfig = React2.useMemo(function() {
    if (disabled) {
      return {};
    }
    return {
      showEffect
    };
  }, [disabled]);
  return React2.createElement(config_provider_default, {
    wave: waveConfig
  }, children);
}
export {
  HappyProvider
};
//# sourceMappingURL=@ant-design_happy-work-theme.js.map
