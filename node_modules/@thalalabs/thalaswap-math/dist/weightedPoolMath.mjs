// src/weightedPoolMath.ts
function calcOutGivenInWeighted(bI, wI, bO, wO, aI, sF) {
  const denom = bI + aI * (1 - sF);
  return bO * (1 - Math.pow(bI / denom, wI / wO));
}
function calcInGivenOutWeighted(bI, wI, bO, wO, aO, sF) {
  return bI * (Math.pow(bO / (bO - aO), wO / wI) - 1) / (1 - sF);
}
function calcPriceImpactPercentageWeighted(exactAmountIn, exactAmountOut, balanceIn, balanceOut, weightIn, weightOut) {
  if (balanceOut - exactAmountOut < 1e-6) {
    return 100;
  }
  const oldPrice = balanceIn / balanceOut * weightOut / weightIn;
  balanceIn = balanceIn + exactAmountIn;
  balanceOut = balanceOut - exactAmountOut;
  const newPrice = balanceIn / balanceOut * weightOut / weightIn;
  return Math.abs(newPrice - oldPrice) / oldPrice * 100;
}
export {
  calcInGivenOutWeighted,
  calcOutGivenInWeighted,
  calcPriceImpactPercentageWeighted
};
//# sourceMappingURL=weightedPoolMath.mjs.map