import { Network } from '@aptos-labs/ts-sdk';
import { EntryPayload } from '@thalalabs/surf';

type Edge = {
    pool: LiquidityPool;
    fromIndex: number;
    toIndex: number;
};
type SwapPath = {
    from: string;
    to: string;
    pool: LiquidityPool;
};
type Route = {
    path: SwapPath[];
    amountIn: number;
    amountOut: number;
    priceImpactPercentage: number;
    type: RouteType;
};
type LiquidityPool = {
    coinAddresses: string[];
    balances: number[];
    poolType: PoolType;
    swapFee: number;
    weights?: number[];
    amp?: number;
};
type Coin = {
    address: string;
    decimals: number;
};
type PoolBase = {
    type: string;
    poolType: "Weighted" | "Stable";
    balance0: number;
    balance1: number;
    balance2?: number;
    balance3?: number;
    weights: number[];
    swapFee: number;
    amp?: number;
};
type RawPool = PoolBase & {
    asset0: number;
    asset1: number;
    asset2?: number;
    asset3?: number;
};
type Pool = PoolBase & {
    asset0: Coin;
    asset1: Coin;
    asset2?: Coin;
    asset3?: Coin;
};
type RawPoolData = {
    pools: RawPool[];
    coins: Coin[];
};
type PoolData = {
    pools: Pool[];
    coins: Coin[];
};
type RouteType = "exact_input" | "exact_output";
type PoolType = "Stable" | "Weighted";
type Graph = Record<string, Edge[]>;
type Distances = Record<string, Record<number, number>>;
type Predecessors = Record<string, Record<number, {
    token: string;
    pool: LiquidityPool;
} | null>>;
type AssetIndex = "asset0" | "asset1" | "asset2" | "asset3";
type BalanceIndex = "balance0" | "balance1" | "balance2" | "balance3";

type LiquidityPoolMetadata = {
    type: string;
    poolType: PoolType;
    numCoins: number;
    coinAddresses: string[];
    weights: number[];
};

declare class PoolDataClient {
    poolData: PoolData | null;
    private lastUpdated;
    private expiry;
    private retryLimit;
    private client;
    private coins;
    private resourceAddress;
    constructor(network: Network, fullnode: string, resourceAddress: string);
    getPoolData(): Promise<PoolData>;
}

type Options = {
    maxAllowedSwapPercentage?: number;
    poolFilter?: (pool: Pool) => boolean;
};
declare class ThalaswapRouter {
    client: PoolDataClient;
    private graph;
    private coins;
    private resourceAddress;
    private multirouterAddress;
    private options;
    constructor(network: Network, fullnode: string, resourceAddress: string, multirouterAddress: string, options?: Options);
    setPoolDataClient(client: PoolDataClient): void;
    refreshData(): Promise<void>;
    buildGraph(pools: Pool[]): Promise<Graph>;
    getRouteGivenExactInput(startToken: string, endToken: string, amountIn: number, maxHops?: number): Promise<Route | null>;
    getRouteGivenExactOutput(startToken: string, endToken: string, amountOut: number, maxHops?: number): Promise<Route | null>;
    encodeRoute(route: Route, slippagePercentage: number, balanceCoinIn?: number): EntryPayload;
}

export { type AssetIndex, type BalanceIndex, type Coin, type Distances, type Edge, type Graph, type LiquidityPool, type LiquidityPoolMetadata, type Pool, type PoolData, PoolDataClient, type PoolType, type Predecessors, type RawPool, type RawPoolData, type Route, type SwapPath, ThalaswapRouter };
