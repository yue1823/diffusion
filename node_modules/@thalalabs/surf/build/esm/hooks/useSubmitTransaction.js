import { useState, useRef } from 'react';
import { useWallet } from '@aptos-labs/wallet-adapter-react';
export const useSubmitTransaction = () => {
    const { connected, signAndSubmitTransaction } = useWallet();
    const [isIdle, setIsIdle] = useState(true);
    const [isLoading, setIsLoading] = useState(false);
    const [data, setResult] = useState();
    const [error, setError] = useState();
    const idRef = useRef(0);
    function reset() {
        setIsIdle(true);
        setIsLoading(false);
        setResult(undefined);
        setError(undefined);
        idRef.current = idRef.current + 1;
    }
    async function submitTransaction(payload, options) {
        if (connected === false) {
            throw new Error('Wallet is not connected');
        }
        if (signAndSubmitTransaction === undefined) {
            return;
        }
        const id = idRef.current;
        if (!isIdle) {
            throw new Error('Transaction is already in progress');
        }
        setIsLoading(true);
        setIsIdle(false);
        let result;
        try {
            result = await signAndSubmitTransaction({
                data: {
                    ...payload,
                    functionArguments: payload.functionArguments.map((arg) => {
                        if (Array.isArray(arg)) {
                            return arg.map((item) => item);
                        }
                        else if (typeof arg === 'object') {
                            throw new Error(`a value of struct type: ${arg} is not supported`);
                        }
                        else {
                            return arg;
                        }
                    }),
                },
                options: options,
            });
            if (id === idRef.current) {
                setResult(result);
                setIsLoading(false);
            }
        }
        catch (e) {
            setError(error);
            setIsLoading(false);
            throw e;
        }
        return result;
    }
    return { submitTransaction, reset, isLoading, isIdle, data, error };
};
//# sourceMappingURL=useSubmitTransaction.js.map