export function createEntryPayload(abi, payload) {
    const fnAbi = abi.exposed_functions.filter((f) => f.name === payload.function)[0];
    if (fnAbi === undefined)
        throw new Error(`Function ${payload.function} not found in ABI`);
    const typeArguments = payload.typeArguments;
    const valArguments = payload.functionArguments;
    const abiArgs = fnAbi.params[0] === '&signer'
        ? fnAbi.params.slice(1)
        : fnAbi.params;
    if (fnAbi === undefined)
        throw new Error(`Function ${payload.function} not found in ABI`);
    if (abiArgs.length !== valArguments.length)
        throw new Error(`Function ${payload.function} expects ${fnAbi.params.length} arguments, but ${payload.functionArguments.length} were provided`);
    if (fnAbi.generic_type_params.length !== typeArguments.length)
        throw new Error(`Function ${payload.function} expects ${fnAbi.generic_type_params.length} type arguments, but ${payload.typeArguments.length} were provided`);
    return {
        typeArguments: payload.typeArguments,
        functionArguments: payload.functionArguments,
        function: `${payload.address ?? abi.address}::${abi.name}::${payload.function}`,
    };
}
//# sourceMappingURL=createEntryPayload.js.map