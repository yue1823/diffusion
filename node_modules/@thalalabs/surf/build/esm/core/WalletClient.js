import { createEntryPayload } from './createEntryPayload.js';
export class WalletClient {
    constructor({ wallet }) {
        Object.defineProperty(this, "wallet", {
            enumerable: true,
            configurable: true,
            writable: true,
            value: void 0
        });
        this.wallet = wallet;
    }
    async submitTransaction(payload) {
        return await this.wallet.signAndSubmitTransaction({
            sender: this.wallet.account?.address ?? "",
            data: {
                ...payload,
                functionArguments: payload.functionArguments.map((arg) => {
                    if (Array.isArray(arg)) {
                        return arg.map((item) => item);
                    }
                    else if (typeof arg === 'object') {
                        throw new Error(`a value of struct type: ${arg} is not supported`);
                    }
                    else {
                        return arg;
                    }
                }),
            }
        });
    }
    useABI(abi) {
        return new Proxy({}, {
            get: (_, prop) => {
                const functionName = prop.toString();
                return (...args) => {
                    const payload = createEntryPayload(abi, {
                        function: functionName,
                        typeArguments: args[0].type_arguments,
                        functionArguments: args[0].arguments,
                    });
                    return this.submitTransaction(payload);
                };
            },
        });
    }
}
//# sourceMappingURL=WalletClient.js.map