import { ABIEntryClient, ABIViewClient, ABIRoot, EntryPayload, ViewPayload, DefaultABITable, ABIResourceClient } from '../types/index.js';
import { ABITable } from '../types/defaultABITable.js';
import { Aptos, LedgerVersionArg, MoveValue, Account, CommittedTransactionResponse, PublicKey, AccountAddressInput, UserTransactionResponse, WaitForTransactionOptions } from '@aptos-labs/ts-sdk';
/**
 * Create a client to interact with Aptos smart contract.
 *
 * @param aptosClient The Aptos ts-sdk client.
 * @returns The Surf client object.
 * @example
 * const client = createSurfClient(new Aptos());
 */
export declare function createSurfClient<TABITable extends ABITable = DefaultABITable>(aptosClient: Aptos): Client<TABITable>;
export declare class Client<TABITable extends ABITable> {
    private client;
    constructor(client: Aptos);
    /**
     * Queries for a Move view function
     *
     * @param args.payload The payload object created by `createViewPayload`.
     * @param options.ledgerVersion Specifies ledger version of transactions. By default latest version will be used.
     * @returns an array of Move values
     * @example
     * const payload = createViewPayload(COIN_ABI, {
     *   function: 'balance',
     *   functionArguments: ['0x1'],
     *   typeArguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     * const [balance] = await client.view({ payload });
     */
    view<TReturn extends MoveValue[]>(args: {
        payload: ViewPayload<TReturn>;
        options?: LedgerVersionArg;
    }): Promise<TReturn>;
    /**
     * Submit a transaction.
     *
     * @param args.signer The signer account to sign the transaction
     * @param args.payload The payload object created by `createEntryPayload`.
     * @param args.options Option properties to pass for waitForTransaction() function
     * @returns The transaction response.
     * @example
     * const payload = createEntryPayload(COIN_ABI, {
     *   function: 'transfer',
     *   functionArguments: ['0x1', 1],
     *   typeArguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     *
     * const result = await client.submitTransaction({
     *   payload,
     *   signer: account,
     * });
     */
    submitTransaction(args: {
        signer: Account;
        payload: EntryPayload;
        options?: WaitForTransactionOptions;
    }): Promise<CommittedTransactionResponse>;
    /**
     * Simulate a transaction.
     *
     * @param args.publicKey The sender public key
     * @param args.sender The sender address
     * @param args.payload The payload object created by `createEntryPayload`.
     * @returns The transaction response.
     * @example
     * const payload = createEntryPayload(COIN_ABI, {
     *   function: 'transfer',
     *   functionArguments: ['0x1', 1],
     *   typeArguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     *
     * const result = await client.simulateTransaction({
     *   payload,
     *   sender: account.accountAddress,
     *   publicKey: account.publicKey,
     * });
     */
    simulateTransaction(args: {
        publicKey: PublicKey;
        sender: AccountAddressInput;
        payload: EntryPayload;
    }): Promise<UserTransactionResponse>;
    /**
     * Builds ABI from a provided address and module name for given client. ABI name can be taken from abi.name
     *
     * @param address The module address
     * @param moduleName The module name
     * @returns The constructed ABI
     * @example
     * const abi = await client.fetchABI(address = '0x1', moduleName = 'AptosCoin');
     */
    fetchABI<T extends ABIRoot>(address: string, moduleName: string): Promise<T>;
    /**
     * Create a client associated with a specific ABI.
     *
     * @param abi The ABI JSON.
     * @param address The address of the module. If not provided, ABI address will be used.
     * @returns A client can call view/entry functions or get account resource.
     * @example
     * const [balance] = await client.useABI(COIN_ABI).view.balance({
     *    functionArguments: ['0x1'],
     *    typeArguments: ['0x1::aptos_coin::AptosCoin'],
     * });
     */
    useABI<T extends ABIRoot>(abi: T, address?: string): {
        /**
         * Queries for a Move view function
         *
         * @example
         * const [balance] = await client.useABI(COIN_ABI).view.balance({
         *     functionArguments: ['0x1'],
         *     typeArguments: ['0x1::aptos_coin::AptosCoin'],
         * });
         */
        view: ABIViewClient<T>;
        /**
         * Call an entry function.
         *
         * @example
         * const { hash } = await client.useABI(COIN_ABI).entry.transfer({
         *     functionArguments: ['0x1', 1],
         *     typeArguments: ['0x1::aptos_coin::AptosCoin'],
         *     account,
         * });
         */
        entry: ABIEntryClient<T>;
        /**
         * Get account resource.
         *
         * @example
         * const { data } = await client.useABI(COIN_ABI).resource.CoinStore({
         *     typeArguments: ['0x1::aptos_coin::AptosCoin'],
         *     account: '0x1',
         * });
         */
        resource: ABIResourceClient<TABITable, T>;
    };
}
//# sourceMappingURL=Client.d.ts.map